<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="python.png" type="Manipulator" xmlns="http://knime.org/node/v4.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
	<name>Python Script (JS)</name>
	<shortDescription>
		Allows executing a Python script in a local Python environment.
	</shortDescription>
	<fullDescription>
		<intro>
			Allows executing a Python script in a local Python environment.
			TODO
		</intro>
	</fullDescription>
	<ports>
		<dynInPort name="Pickled object" group-identifier="Input object (pickled)" insert-before="0">
			An input object. Input objects are automatically unpickled for you. You can access them via
			<tt>knio.input_objects</tt>. For example, the first input object can be accessed like this:
			<tt>knio.input_objects[0]</tt>.
		</dynInPort>
		<dynInPort name="Table" group-identifier="Input table" insert-before="0">
			An input table. You can access input tables via <tt>knio.input_tables</tt>. For example, the first input
			table can be accessed like this: <tt>knio.input_tables[0]</tt>. Each table is an instance of type
			<tt>knime_table.ReadTable</tt>. Before being able to work with the table, you have to convert it into, for
			example, a <tt>pandas.DataFrame</tt> or a <tt>pyarrow.Table</tt>. Please refer to the
			<a href="https://docs.knime.com/latest/python_installation_guide/">KNIME Python Integration Guide</a> to
			learn how to do this, or take a look at one of the templates on the <i>Templates</i> tab of the node.
		</dynInPort>
		<dynOutPort name="Table" group-identifier="Output table" insert-before="0">
			An output table. The table has to be populated via <tt>knio.output_tables</tt> in your script. For example,
			to populate the first output table, assign it a value like this: <tt>knio.ouput_tables[0] =
			&lt;value&gt;</tt>. The assigned value must be an instance of type <tt>knime_table.WriteTable</tt> which can
			be created from, for example, a <tt>pandas.DataFrame</tt> or a <tt>pyarrow.Table</tt>. Please refer to the
			<a href="https://docs.knime.com/latest/python_installation_guide/">KNIME Python Integration Guide</a> to
			learn how to do this, or take a look at one of the templates on the <i>Templates</i> tab of the node.
		</dynOutPort>
		<dynOutPort name="Image" group-identifier="Output image" insert-before="0">
			An output image. The image has to be populated via <tt>knio.output_images</tt> in your script. For example,
			to populate the first output image, assign it a value like this <tt>knio.output_images[0] =
			&lt;value&gt;</tt>. The assigned value must be either a string describing an SVG image or a byte array
			encoding a PNG image.
		</dynOutPort>
		<dynOutPort name="Pickled object" group-identifier="Output object (pickled)" insert-before="0">
			An output object. The object has to be populated via <tt>knio.output_objects</tt>. For example, to
			populate the first output object, assign it a value like this: <tt>knio.output_objects[0] =
			&lt;value&gt;</tt>. The assigned value can be of any type that can be pickled. It will automatically be
			pickled for you.
		</dynOutPort>
	</ports>
</knimeNode>
